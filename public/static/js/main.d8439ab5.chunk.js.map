{"version":3,"sources":["components/nav/index.js","components/table/index.js","App.js","Login.js","serviceWorker.js","index.js"],"names":["Nav","to","className","Table","props","state","person","url","process","PORT","cliente","escribano","urlProps","color","biggestEscribano","estadoCliente","clientSold","BiggestEscribano","bind","ClientHowSold","this","fetch","response","json","data","setState","responseClie","dataClie","responseEsc","dataEsc","prevProps","id","map","key","_id","name","lastName","codigo","tipo","descripcion","indexOf","style","backgroundColor","filter","client","element","cpColumn","escrituraTipo","lastNameColumn","array","ObjectBiggest","lastname","count","j","length","i","forEach","arrayCliente","console","log","push","nameColumn","jsxTable","onClick","React","Component","App","exact","path","render","fontFamily","routerProps","Login","validation","login","document","getElementById","value","password","placeholder","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8439ab5.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../../App.css'\r\nimport './style.css'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nfunction Nav () {\r\n  return (\r\n    <ul>\r\n      <Link to=\"/escribano\" className=\"link\">\r\n        <li>Escribanos</li>\r\n      </Link>\r\n      <Link to=\"/cliente\" className=\"link\">\r\n        <li>Clientes</li>\r\n      </Link>\r\n      <Link to=\"/localidad\" className=\"link\">\r\n        <li>Localidades</li>\r\n      </Link>\r\n      <Link to=\"/escritura\" className=\"link\">\r\n        <li>Escrituras</li>\r\n      </Link>\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default Nav","import React from 'react'\r\nimport './style.css'\r\n\r\nclass Table extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      person: [],\r\n      url: `http://localhost:${process.env.PORT||5000}/api/`,\r\n      cliente: [],\r\n      escribano : [],\r\n      urlProps: this.props.url,\r\n      color: null,\r\n      biggestEscribano: 0,\r\n      estadoCliente: false,\r\n      clientSold: []\r\n    } \r\n    this.BiggestEscribano = this.BiggestEscribano.bind(this)\r\n    this.ClientHowSold = this.ClientHowSold.bind(this)\r\n  }\r\n  \r\n\r\n  async componentDidMount() { \r\n    const url = `${this.state.url}${this.props.url}`\r\n    const response = await fetch(url)\r\n    const data = await response.json()\r\n    this.setState({person: data})\r\n    const responseClie = await fetch(`${this.state.url}cliente`)\r\n    const dataClie = await responseClie.json()\r\n    this.setState({cliente: dataClie})\r\n    const responseEsc = await fetch(`${this.state.url}escribano`)\r\n    const dataEsc = await responseEsc.json()\r\n    this.setState({escribano: dataEsc})\r\n  }\r\n\r\n  async componentDidUpdate(prevProps) { \r\n    if (this.props.url !== prevProps.url){\r\n      const url = `${this.state.url}${this.props.url}`\r\n      const response = await fetch(url)\r\n      const data = await response.json()\r\n      this.setState({person: data})\r\n    }\r\n  }\r\n\r\n  nameColumn () {\r\n    return (\r\n      <div id=\"name\">\r\n        <div className=\"title\">Name</div>\r\n        {this.state.person.map(person => (\r\n          <div key = {person._id} className=\"nameRow\">\r\n            {`${person.name}`}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  lastNameColumn () {\r\n    return (\r\n      <div id=\"lastName\">\r\n        <div className=\"title\">Last Name</div>\r\n          {this.state.person.map(person => (\r\n            <div key = {person._id} className=\"lastNameRow\">\r\n              {person.lastName}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  cpColumn () {\r\n    return (\r\n      <div id=\"cp\">\r\n        <div className=\"title\">Postal Code</div>\r\n          {this.state.person.map(person => (\r\n            <div key = {person._id} className=\"codigoRow\">\r\n              {`${person.codigo}`}\r\n            </div>\r\n          ))}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  escrituraTipo () {\r\n    return (\r\n      <div id=\"escritura\">\r\n        <div id=\"tipo\">\r\n          <div className=\"title\">Tipo</div>\r\n            {this.state.person.map(person => (\r\n              <div key = {person._id} className=\"tipoRow\">\r\n                {`${person.tipo}`}\r\n              </div>\r\n          ))}\r\n        </div> \r\n        <div id=\"desc\">\r\n          <div className=\"title\">Descripcion</div>\r\n            {this.state.person.map(person => (\r\n              <div key = {person._id} className=\"descRow\">\r\n                {`${person.descripcion}`}\r\n              </div>\r\n            ))}\r\n        </div>   \r\n        <div id=\"cliente\">\r\n          <div className=\"title\">Cliente</div>\r\n            {\r\n              this.state.person.map( person => (this.state.clientSold.indexOf(person.cliente) >= 0)?\r\n                (<div key = {person._id} className=\"clienteRow\"  style={{backgroundColor:'green'}}>\r\n                  {this.state.cliente.filter(client => client._id === person.cliente).map(client => client.lastName)}\r\n                </div>):\r\n                (<div key = {person._id} className=\"clienteRow\"  style={{backgroundColor:''}}>\r\n                  {this.state.cliente.filter(client => client._id === person.cliente).map(client => client.lastName)}\r\n                </div>))\r\n            }\r\n        </div>   \r\n        <div id=\"escribano\">\r\n          <div className=\"title\">Escribano</div>\r\n              {this.state.person.map(person => \r\n                person.escribano===this.state.biggestEscribano?(\r\n                <div key = {person._id} className=\"escribanoRow\" style={{backgroundColor:'green'}}>\r\n                  {this.state.escribano.filter(element => element._id === person.escribano).map(element => element.lastName)}\r\n                </div>\r\n                ):\r\n                (<div key = {person._id} className=\"escribanoRow\" style={{backgroundColor:''}}>\r\n                  {this.state.escribano.filter(element => element._id === person.escribano).map(element => element.lastName)}\r\n                </div>)\r\n              )}\r\n        </div>   \r\n      </div>\r\n    )\r\n  }\r\n\r\n  jsxTable () {\r\n    switch(this.props.url){\r\n      case ('localidad'):\r\n        return this.cpColumn()\r\n      case('escritura'):\r\n        return this.escrituraTipo()\r\n      default:\r\n        return this.lastNameColumn()\r\n    }\r\n  }\r\n\r\n  BiggestEscribano() {\r\n    let array = this.state.person.map(person => (this.state.escribano.filter(element => element._id === person.escribano).map(element => element.lastName)))\r\n    let ObjectBiggest = {\r\n      lastname: '',\r\n      count: 0\r\n    }\r\n    let count = 0\r\n    for (let j = 0; j < array.length; j++){\r\n      for(let i = 0; i < array.length; i++){\r\n        if (array[i][0] === array[j][0]){\r\n          count ++\r\n        }\r\n      }\r\n      if(count > ObjectBiggest.count) {\r\n        ObjectBiggest.count = count\r\n        ObjectBiggest.lastname = array[j][0]\r\n      }\r\n      count = 0\r\n    }\r\n    this.state.escribano.forEach(element => {\r\n      if(element.lastName === ObjectBiggest.lastname){\r\n        return this.setState({biggestEscribano: element._id})\r\n      }\r\n    })\r\n    if(this.state.biggestEscribano !== 0){\r\n      this.setState({biggestEscribano: 0})\r\n    }\r\n  }\r\n\r\n  ClientHowSold() {\r\n    if(this.state.estadoCliente === false){\r\n      let arrayCliente = []\r\n      console.log(this.state.clientSold)\r\n      for (let j = 0; j < this.state.person.length; j++){\r\n        if(this.state.person[j].tipo === 'Venta'){\r\n          arrayCliente.push(this.state.person[j].cliente)\r\n        }\r\n      }\r\n      this.setState({clientSold: arrayCliente})\r\n      this.setState({estadoCliente: true})\r\n    }\r\n    else {\r\n      this.setState({clientSold: []})\r\n      this.setState({estadoCliente: false})\r\n    }\r\n  }\r\n\r\n  render () {\r\n    return ( \r\n      <>\r\n        <div id=\"table\">\r\n          {this.props.url!=='escritura'?this.nameColumn():null}\r\n          {this.jsxTable()}\r\n        </div>\r\n        {this.props.url==='escritura'?(\r\n        <div className=\"buttons\">\r\n          <button  onClick={this.BiggestEscribano}>Escribano con mas escrituras</button>\r\n          <button  onClick={this.ClientHowSold}>Clientes que vendieron</button>\r\n        </div>):null}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table","import React from 'react'\r\nimport './App.css'\r\nimport Nav from './components/nav'\r\nimport Table from './components/table'\r\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\r\n\r\nfunction App () { \r\n  return (\r\n    <Router>\r\n      <div id=\"container\">\r\n        <header><span>Base de Datos Aplicada I</span></header>\r\n        <nav>\r\n          <Nav />\r\n        </nav>\r\n        <main>\r\n          <Switch>\r\n            <Route exact path=\"/\" render = {props => <div className=\"TitleInit\"><h1 style={{color: 'white', fontFamily: 'monospace'}}>Esperando consulta...</h1></div>} />\r\n            <Route path=\"/cliente\" \r\n            render={(routerProps) => (<Table {...routerProps} url = 'cliente'/>)}\r\n            />\r\n            <Route path=\"/escribano\" \r\n            render={(routerProps) => (<Table {...routerProps} url = 'escribano'/>)}\r\n            />\r\n            <Route path=\"/localidad\" \r\n            render={(routerProps) => (<Table {...routerProps} url = 'localidad'/>)}\r\n            />\r\n            <Route path=\"/escritura\" \r\n            render={(routerProps) => (<Table {...routerProps} url = 'escritura'/>)}\r\n            />\r\n          </Switch> \r\n        </main>\r\n        <footer><span>Azzaretti && Carracedo</span></footer> \r\n      </div>   \r\n    </Router>     \r\n  )\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react'\r\nimport './Login.css'\r\nimport App from './App'\r\n\r\nclass Login extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      validation: false\r\n    }\r\n    this.login = this.login.bind(this)\r\n  }\r\n\r\n  login() {\r\n    const name = document.getElementById('nameLogin').value\r\n    const password = document.getElementById('passwordLogin').value\r\n    if(name==='mauri' && password === '1234'){\r\n      this.setState({validation: true})\r\n    }  \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.validation===false?\r\n        <div id=\"loginContainer\">\r\n          <div id=\"form\">\r\n            <input id=\"nameLogin\" placeholder=\"Your name..\"></input>\r\n            <input id=\"passwordLogin\" placeholder=\"Your password..\"></input>\r\n            <button className=\"buttonLogin\" onClick={this.login}>Login</button>\r\n          </div>     \r\n        </div>:\r\n        <App />}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport Login from './Login'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<Login />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}